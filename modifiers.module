<?php

/**
 * @file
 * Modifiers module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\modifiers\Modifiers;

/**
 * Implements hook_preprocess_HOOK().
 */
function modifiers_preprocess_html(&$variables) {

  // Attach initialization script for all JS modifications.
  $variables['#attached']['library'][] = 'modifiers/init';
}

/**
 * Implements hook_entity_view_alter().
 */
function modifiers_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  if (!($entity instanceof FieldableEntityInterface) || !$entity->hasField(Modifiers::FIELD)) {
    return;
  }

  $entity_type = $entity->getEntityTypeId();
  $entity_id = Html::getClass($entity_type . '-' . $entity->id());

  // Skip preview display mode on paragraph entities.
  if ($entity_type === 'paragraph' && !empty($build['#view_mode']) && $build['#view_mode'] === 'preview') {
    return;
  }

  // Add common class for all content entities.
  $build['#attributes']['class'][] = 'modifiers';
  // Create an unique entity ID class.
  $build['#attributes']['class'][] = Html::getClass('modifiers-id-' . $entity_id);
  // Add entity type class.
  $build['#attributes']['class'][] = Html::getClass('modifiers-type-' . $entity_type);
  // Add entity bundle class.
  $build['#attributes']['class'][] = Html::getClass('modifiers-bundle-' . $entity->bundle());
  // Add entity view mode class.
  if (!empty($build['#view_mode'])) {
    $build['#attributes']['class'][] = Html::getClass('modifiers-display-' . $build['#view_mode']);
  }

  // Initialize modifiers service.
  /** @var \Drupal\modifiers\Modifiers $modifiers */
  $modifiers = \Drupal::service('modifiers');

  $config = $modifiers->extractEntityConfig($entity, Modifiers::FIELD);

  if (empty($config)) {
    return;
  }

  $build['#modifiers'][] = $config;

  // Selector needs to be very specific.
  $selector = 'html body .modifiers.modifiers-id-' . $entity_id;

  $modifications = [];

  // Fill all modifications.
  $modifiers->process($modifications, $config['modifiers'], $selector);

  if (!empty($modifications)) {
    $modifiers->apply($modifications, $build, $entity_id);
  }
}
